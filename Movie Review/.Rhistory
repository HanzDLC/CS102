for (i in seq_along(movieURLs[1:2])) {
counter <- 0  # Reset counter for each movie
for (j in 1:12) {
url <- paste('https://www.imdb.com/title/', urlValues[i], '/reviews/_ajax?&paginationKey=', paginationKeys[j], sep = "")
session <- bow(url,
user_agent = "Educational")
parentNode <- scrape(session) %>%
html_elements('.review-container')
currentTitles <- parentNode %>%
html_node('a.title') %>%
html_text()
currentUsers <- parentNode %>%
html_node('.display-name-link') %>%
html_text()
currentDates <- parentNode %>%
html_node('.review-date') %>%
html_text()
currentContents <- parentNode %>%
html_node('.text.show-more__control') %>%
html_text()
currentStars <- parentNode %>%
html_node('.ipl-ratings-bar') %>%
html_text()
# Append data to vectors
Title <- c(Title, currentTitles)
User <- c(User, currentUsers)
Date <- c(Date, currentDates)
Content <- c(Content, currentContents)
Stars <- c(Stars, currentStars)
# Update counter
counter <- counter + length(currentTitles)
# Check if limit is reached for this movie
if (counter >= limit) {
break
}
}
Sys.sleep(2)
}
# Create dataframe
sampleDF <- data.frame(
Title = Title,
User = User,
Date = Date,
Content = Content,
Stars = Stars
)
View(sampleDF)
limit <- 300
# Initialize vectors to store data
Title <- c()
User <- c()
Date <- c()
Content <- c()
Stars <- c()
for (i in seq_along(movieURLs[2:3])) {
counter <- 0  # Reset counter for each movie
for (j in 1:12) {
url <- paste('https://www.imdb.com/title/', urlValues[i], '/reviews/_ajax?&paginationKey=', paginationKeys[j], sep = "")
session <- bow(url,
user_agent = "Educational")
parentNode <- scrape(session) %>%
html_elements('.review-container')
currentTitles <- parentNode %>%
html_node('a.title') %>%
html_text()
currentUsers <- parentNode %>%
html_node('.display-name-link') %>%
html_text()
currentDates <- parentNode %>%
html_node('.review-date') %>%
html_text()
currentContents <- parentNode %>%
html_node('.text.show-more__control') %>%
html_text()
currentStars <- parentNode %>%
html_node('.ipl-ratings-bar') %>%
html_text()
# Append data to vectors
Title <- c(Title, currentTitles)
User <- c(User, currentUsers)
Date <- c(Date, currentDates)
Content <- c(Content, currentContents)
Stars <- c(Stars, currentStars)
# Update counter
counter <- counter + length(currentTitles)
# Check if limit is reached for this movie
if (counter >= limit) {
break
}
}
Sys.sleep(2)
}
# Create dataframe
sampleDF <- data.frame(
Title = Title,
User = User,
Date = Date,
Content = Content,
Stars = Stars
)
library(ggplot2)
library(dplyr)
library(polite)
library(xml2)
library(magrittr)
library(rvest)
polite::use_manners(save_as ="polite_scrape.R")
urlValues <- c("tt0111161","tt0068646","tt0468569","tt0071562","tt0050083","tt0108052","tt0167260","tt0110912","tt0120737","tt0060196")
movieTitles <- c("The Shawshank Redemption"," The Godfather","The Dark Knight","The Godfather Part II","Angry Men","Schindler's List","The Lord of the Rings: The Return of the King","Pulp Fiction"," The Lord of the Rings: The Fellowship of the Ring","The Good, the Bad and the Ugly")
movieURLs <- sprintf("https://www.imdb.com/title/%s/reviews/?ref_=tt_ql_2", urlValues)
reviewTitle <- character(0)
userName <- character(0)
reviewDate <- character(0)
metaScore <- character(0)
reviewContent <- character(0)
numStars <- character(0)
paginationKeys <- c("g4w6ddbmqyzdo6ic4oxwjnrwqptm2br23mnt54hlb7e76ud5pjt6ud2yo42fjmzcb4d5qhkk3ukavgdjflgefebwi6vco",
"g4w6ddbmqyzdo6ic4oxwjnzzrpu4qar33int36xiapb7gwt5pjt6uc22pe4frmjob4dsyp5ncbc2krgkicpkp4h53fhca",
"g4w6ddbmqyzdo6ic4oxwjnztrxum6bzy3aktv6hkaxc72w35pjt6ud24oiyfznzmb4dzfggizgqkkuhfkthekebgvh7mm",
"g4w6ddbmqyzdo6ic4oxwjnbzrdu4wcjy3andz6poaxapuul5pjt6ud2zou4vjnrcb4dz6qfo3miej2r3z3oxpfpys2xvk",
"g4w6ddbmqyzdo6ic4oxwjnbxrpum2ar72mndr7pfaxa72vt5pjt6ud2tpazvvmjdb4dxmnmqzrakaribv6nrzvsfzjicq",
"g4w6ddbmqyzdo6ic4oxwjnbvqlrm4bbz2ipdv4hkahbp6vd5pjt6udkyoq4ftmrlb4dv3opusu7avbndoy4e6qkzlcwys",
"g4w6ddbmqyzdo6ic4oxwjnbtqlr4scj43umt56hib7bpyw35pjt6udkyoq4vvmrpb4d7db3dfxh2ea7mwzspknwrdmjty",
"g4w6ddbmqyzdo6ic4oxwjnjyqpqm2cbz3qodz6hjb7bpsw3goq366ss7oy4flmzodb4k4n7ja2dzichs5c445ysjdchn5tq",
"g4w6ddbmqyzdo6ic4oxwjnjwr7smoaj73aktx7pnalcpgv3foq366ss7omyvtnjcdr4k4hfo45rrwrdrfsk42pciueo5jbq",
"g4w6ddbmqyzdo6ic4oxwjnjxrhr4mbzs3ypdx6hmb7apwv3eoq366sszpa3vjnrmdv4k553pueexi7iz26ycadpc3uj56jq",
"g4w6ddbmqyzdo6ic4oxwjnjurtqmubry34mt76xfalcpqvt5pjt6ud26o4zf7njlb4dqpq5l47dc6o6j4hwjw36cgoszq",
"g4w6ddbmqyzdo6ic4oxwjnjurdt4uajs2iktv6hjahb7yul5pjt6udczpa4vvmrkb4d76njn65mjamp4oe2sqli7sxse2")
sessionsList <- list()
limit <- 300
# Initialize vectors to store data
Title <- c()
User <- c()
Date <- c()
Content <- c()
Stars <- c()
for (i in seq_along(movieURLs[1:2])) {
counter <- 0  # Reset counter for each movie
for (j in 1:12) {
url <- paste('https://www.imdb.com/title/', urlValues[i], '/reviews/_ajax?&paginationKey=', paginationKeys[j], sep = "")
session <- bow(url,
user_agent = "Educational")
parentNode <- scrape(session) %>%
html_elements('.review-container')
currentTitles <- parentNode %>%
html_node('a.title') %>%
html_text()
currentUsers <- parentNode %>%
html_node('.display-name-link') %>%
html_text()
currentDates <- parentNode %>%
html_node('.review-date') %>%
html_text()
currentContents <- parentNode %>%
html_node('.text.show-more__control') %>%
html_text()
currentStars <- parentNode %>%
html_node('.ipl-ratings-bar') %>%
html_text()
# Append data to vectors
Title <- c(Title, currentTitles)
User <- c(User, currentUsers)
Date <- c(Date, currentDates)
Content <- c(Content, currentContents)
Stars <- c(Stars, currentStars)
# Update counter
counter <- counter + length(currentTitles)
# Check if limit is reached for this movie
if (counter >= limit) {
break
}
}
Sys.sleep(2)
}
# Create dataframe
movieReviewData1 <- data.frame(
Title = Title,
User = User,
Date = Date,
Content = Content,
Stars = Stars
)
limit <- 300
# Initialize vectors to store data
Title <- c()
User <- c()
Date <- c()
Content <- c()
Stars <- c()
for (i in seq_along(movieURLs[3:4])) {
counter <- 0  # Reset counter for each movie
for (j in 1:12) {
url <- paste('https://www.imdb.com/title/', urlValues[i], '/reviews/_ajax?&paginationKey=', paginationKeys[j], sep = "")
session <- bow(url,
user_agent = "Educational")
parentNode <- scrape(session) %>%
html_elements('.review-container')
currentTitles <- parentNode %>%
html_node('a.title') %>%
html_text()
currentUsers <- parentNode %>%
html_node('.display-name-link') %>%
html_text()
currentDates <- parentNode %>%
html_node('.review-date') %>%
html_text()
currentContents <- parentNode %>%
html_node('.text.show-more__control') %>%
html_text()
currentStars <- parentNode %>%
html_node('.ipl-ratings-bar') %>%
html_text()
# Append data to vectors
Title <- c(Title, currentTitles)
User <- c(User, currentUsers)
Date <- c(Date, currentDates)
Content <- c(Content, currentContents)
Stars <- c(Stars, currentStars)
# Update counter
counter <- counter + length(currentTitles)
# Check if limit is reached for this movie
if (counter >= limit) {
break
}
}
Sys.sleep(2)
}
# Create dataframe
movieReviewData2 <- data.frame(
Title = Title,
User = User,
Date = Date,
Content = Content,
Stars = Stars
)
limit <- 300
# Initialize vectors to store data
Title <- c()
User <- c()
Date <- c()
Content <- c()
Stars <- c()
for (i in seq_along(movieURLs[5:6])) {
counter <- 0  # Reset counter for each movie
for (j in 1:12) {
url <- paste('https://www.imdb.com/title/', urlValues[i], '/reviews/_ajax?&paginationKey=', paginationKeys[j], sep = "")
session <- bow(url,
user_agent = "Educational")
parentNode <- scrape(session) %>%
html_elements('.review-container')
currentTitles <- parentNode %>%
html_node('a.title') %>%
html_text()
currentUsers <- parentNode %>%
html_node('.display-name-link') %>%
html_text()
currentDates <- parentNode %>%
html_node('.review-date') %>%
html_text()
currentContents <- parentNode %>%
html_node('.text.show-more__control') %>%
html_text()
currentStars <- parentNode %>%
html_node('.ipl-ratings-bar') %>%
html_text()
# Append data to vectors
Title <- c(Title, currentTitles)
User <- c(User, currentUsers)
Date <- c(Date, currentDates)
Content <- c(Content, currentContents)
Stars <- c(Stars, currentStars)
# Update counter
counter <- counter + length(currentTitles)
# Check if limit is reached for this movie
if (counter >= limit) {
break
}
}
Sys.sleep(2)
}
# Create dataframe
movieReviewData3 <- data.frame(
Title = Title,
User = User,
Date = Date,
Content = Content,
Stars = Stars
)
limit <- 300
# Initialize vectors to store data
Title <- c()
User <- c()
Date <- c()
Content <- c()
Stars <- c()
for (i in seq_along(movieURLs[7:8])) {
counter <- 0  # Reset counter for each movie
for (j in 1:12) {
url <- paste('https://www.imdb.com/title/', urlValues[i], '/reviews/_ajax?&paginationKey=', paginationKeys[j], sep = "")
session <- bow(url,
user_agent = "Educational")
parentNode <- scrape(session) %>%
html_elements('.review-container')
currentTitles <- parentNode %>%
html_node('a.title') %>%
html_text()
currentUsers <- parentNode %>%
html_node('.display-name-link') %>%
html_text()
currentDates <- parentNode %>%
html_node('.review-date') %>%
html_text()
currentContents <- parentNode %>%
html_node('.text.show-more__control') %>%
html_text()
currentStars <- parentNode %>%
html_node('.ipl-ratings-bar') %>%
html_text()
# Append data to vectors
Title <- c(Title, currentTitles)
User <- c(User, currentUsers)
Date <- c(Date, currentDates)
Content <- c(Content, currentContents)
Stars <- c(Stars, currentStars)
# Update counter
counter <- counter + length(currentTitles)
# Check if limit is reached for this movie
if (counter >= limit) {
break
}
}
Sys.sleep(2)
}
# Create dataframe
movieReviewData4 <- data.frame(
Title = Title,
User = User,
Date = Date,
Content = Content,
Stars = Stars
)
limit <- 300
# Initialize vectors to store data
Title <- c()
User <- c()
Date <- c()
Content <- c()
Stars <- c()
for (i in seq_along(movieURLs[9:10])) {
counter <- 0  # Reset counter for each movie
for (j in 1:12) {
url <- paste('https://www.imdb.com/title/', urlValues[i], '/reviews/_ajax?&paginationKey=', paginationKeys[j], sep = "")
session <- bow(url,
user_agent = "Educational")
parentNode <- scrape(session) %>%
html_elements('.review-container')
currentTitles <- parentNode %>%
html_node('a.title') %>%
html_text()
currentUsers <- parentNode %>%
html_node('.display-name-link') %>%
html_text()
currentDates <- parentNode %>%
html_node('.review-date') %>%
html_text()
currentContents <- parentNode %>%
html_node('.text.show-more__control') %>%
html_text()
currentStars <- parentNode %>%
html_node('.ipl-ratings-bar') %>%
html_text()
# Append data to vectors
Title <- c(Title, currentTitles)
User <- c(User, currentUsers)
Date <- c(Date, currentDates)
Content <- c(Content, currentContents)
Stars <- c(Stars, currentStars)
# Update counter
counter <- counter + length(currentTitles)
# Check if limit is reached for this movie
if (counter >= limit) {
break
}
}
Sys.sleep(2)
}
# Create dataframe
movieReviewData5 <- data.frame(
Title = Title,
User = User,
Date = Date,
Content = Content,
Stars = Stars
)
allData <- rbind(movieReviewData1,movieReviewData2, smovieReviewData3, movieReviewData3,movieReviewData4,movieReviewData25)
allData <- rbind(movieReviewData1,movieReviewData2, movieReviewData3, movieReviewData3,movieReviewData4,movieReviewData25)
allData <- rbind(movieReviewData1,movieReviewData2, movieReviewData3, movieReviewData3,movieReviewData4,movieReviewData5)
View(movieReviewData1)
library(ggplot2)
library(dplyr)
library(polite)
library(xml2)
library(magrittr)
library(rvest)
polite::use_manners(save_as ="polite_scrape.R")
urlValues <- c("tt0111161","tt0068646","tt0468569","tt0071562","tt0050083","tt0108052","tt0167260","tt0110912","tt0120737","tt0060196")
movieTitles <- c("The Shawshank Redemption"," The Godfather","The Dark Knight","The Godfather Part II","Angry Men","Schindler's List","The Lord of the Rings: The Return of the King","Pulp Fiction"," The Lord of the Rings: The Fellowship of the Ring","The Good, the Bad and the Ugly")
movieURLs <- sprintf("https://www.imdb.com/title/%s/reviews/?ref_=tt_ql_2", urlValues)
reviewTitle <- character(0)
userName <- character(0)
reviewDate <- character(0)
metaScore <- character(0)
reviewContent <- character(0)
numStars <- character(0)
paginationKeys <- c("g4w6ddbmqyzdo6ic4oxwjnrwqptm2br23mnt54hlb7e76ud5pjt6ud2yo42fjmzcb4d5qhkk3ukavgdjflgefebwi6vco",
"g4w6ddbmqyzdo6ic4oxwjnzzrpu4qar33int36xiapb7gwt5pjt6uc22pe4frmjob4dsyp5ncbc2krgkicpkp4h53fhca",
"g4w6ddbmqyzdo6ic4oxwjnztrxum6bzy3aktv6hkaxc72w35pjt6ud24oiyfznzmb4dzfggizgqkkuhfkthekebgvh7mm",
"g4w6ddbmqyzdo6ic4oxwjnbzrdu4wcjy3andz6poaxapuul5pjt6ud2zou4vjnrcb4dz6qfo3miej2r3z3oxpfpys2xvk",
"g4w6ddbmqyzdo6ic4oxwjnbxrpum2ar72mndr7pfaxa72vt5pjt6ud2tpazvvmjdb4dxmnmqzrakaribv6nrzvsfzjicq",
"g4w6ddbmqyzdo6ic4oxwjnbvqlrm4bbz2ipdv4hkahbp6vd5pjt6udkyoq4ftmrlb4dv3opusu7avbndoy4e6qkzlcwys",
"g4w6ddbmqyzdo6ic4oxwjnbtqlr4scj43umt56hib7bpyw35pjt6udkyoq4vvmrpb4d7db3dfxh2ea7mwzspknwrdmjty",
"g4w6ddbmqyzdo6ic4oxwjnjyqpqm2cbz3qodz6hjb7bpsw3goq366ss7oy4flmzodb4k4n7ja2dzichs5c445ysjdchn5tq",
"g4w6ddbmqyzdo6ic4oxwjnjwr7smoaj73aktx7pnalcpgv3foq366ss7omyvtnjcdr4k4hfo45rrwrdrfsk42pciueo5jbq",
"g4w6ddbmqyzdo6ic4oxwjnjxrhr4mbzs3ypdx6hmb7apwv3eoq366sszpa3vjnrmdv4k553pueexi7iz26ycadpc3uj56jq",
"g4w6ddbmqyzdo6ic4oxwjnjurtqmubry34mt76xfalcpqvt5pjt6ud26o4zf7njlb4dqpq5l47dc6o6j4hwjw36cgoszq",
"g4w6ddbmqyzdo6ic4oxwjnjurdt4uajs2iktv6hjahb7yul5pjt6udczpa4vvmrkb4d76njn65mjamp4oe2sqli7sxse2")
sessionsList <- list()
limit <- 300
# Initialize vectors to store data
Title1 <- c()
User1 <- c()
Date1 <- c()
Content1 <- c()
Stars1 <- c()
for (i in seq_along(movieURLs[1:2])) {
counter <- 0  # Reset counter for each movie
for (j in 1:12) {
url1 <- paste('https://www.imdb.com/title/', urlValues[i], '/reviews/_ajax?&paginationKey=', paginationKeys[j], sep = "")
session1 <- bow(url1,
user_agent = "Educational")
parentNode1 <- scrape(session1) %>%
html_elements('.review-container')
currentTitles1 <- parentNode1 %>%
html_node('a.title') %>%
html_text()
currentUsers1 <- parentNode1 %>%
html_node('.display-name-link') %>%
html_text()
currentDates1 <- parentNode1 %>%
html_node('.review-date') %>%
html_text()
currentContents1 <- parentNode1 %>%
html_node('.text.show-more__control') %>%
html_text()
currentStars1 <- parentNode1 %>%
html_node('.ipl-ratings-bar') %>%
html_text()
# Append data to vectors
Title1 <- c(Title1, currentTitles1)
User1 <- c(User1, currentUsers1)
Date1 <- c(Date1, currentDates1)
Content1 <- c(Content1, currentContents1)
Stars1 <- c(Stars1, currentStars1)
# Update counter
counter <- counter + length(currentTitles1)
# Check if limit is reached for this movie
if (counter = limit) {
limit <- 300
# Initialize vectors to store data
Title1 <- c()
User1 <- c()
Date1 <- c()
Content1 <- c()
Stars1 <- c()
for (i in seq_along(movieURLs[1:2])) {
counter <- 0  # Reset counter for each movie
for (j in 1:12) {
url1 <- paste('https://www.imdb.com/title/', urlValues[i], '/reviews/_ajax?&paginationKey=', paginationKeys[j], sep = "")
session1 <- bow(url1,
user_agent = "Educational")
parentNode1 <- scrape(session1) %>%
html_elements('.review-container')
currentTitles1 <- parentNode1 %>%
html_node('a.title') %>%
html_text()
currentUsers1 <- parentNode1 %>%
html_node('.display-name-link') %>%
html_text()
currentDates1 <- parentNode1 %>%
html_node('.review-date') %>%
html_text()
currentContents1 <- parentNode1 %>%
html_node('.text.show-more__control') %>%
html_text()
currentStars1 <- parentNode1 %>%
html_node('.ipl-ratings-bar') %>%
html_text()
# Append data to vectors
Title1 <- c(Title1, currentTitles1)
User1 <- c(User1, currentUsers1)
Date1 <- c(Date1, currentDates1)
Content1 <- c(Content1, currentContents1)
Stars1 <- c(Stars1, currentStars1)
# Update counter
counter <- counter + length(currentTitles1)
# Check if limit is reached for this movie
if (counter == limit) {
break
}
}
Sys.sleep(2) # System pauses for 2 seconds to avoid overloading the server
}
